/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./content/themes/dude/js/src/navigation.js":
/*!**************************************************!*\
  !*** ./content/themes/dude/js/src/navigation.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"navClick\": () => (/* binding */ navClick),\n/* harmony export */   \"navDesktop\": () => (/* binding */ navDesktop),\n/* harmony export */   \"navMobile\": () => (/* binding */ navMobile),\n/* harmony export */   \"navSticky\": () => (/* binding */ navSticky)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\");\n/* harmony import */ var _navigation_add_multiple_event_listeners__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./navigation/add-multiple-event-listeners */ \"./content/themes/dude/js/src/navigation/add-multiple-event-listeners.js\");\n/* harmony import */ var _navigation_calculate_burger_menu_position__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./navigation/calculate-burger-menu-position */ \"./content/themes/dude/js/src/navigation/calculate-burger-menu-position.js\");\n/* harmony import */ var _navigation_a11y_focus_trap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./navigation/a11y-focus-trap */ \"./content/themes/dude/js/src/navigation/a11y-focus-trap.js\");\n/* harmony import */ var _navigation_calculate_dropdown_toggle_height__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./navigation/calculate-dropdown-toggle-height */ \"./content/themes/dude/js/src/navigation/calculate-dropdown-toggle-height.js\");\n/* harmony import */ var _navigation_check_for_submenu_overflow__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./navigation/check-for-submenu-overflow */ \"./content/themes/dude/js/src/navigation/check-for-submenu-overflow.js\");\n/* harmony import */ var _navigation_dropdown_menu_on_hover__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./navigation/dropdown-menu-on-hover */ \"./content/themes/dude/js/src/navigation/dropdown-menu-on-hover.js\");\n/* harmony import */ var _navigation_a11y_add_dropdown_toggle_labels__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./navigation/a11y-add-dropdown-toggle-labels */ \"./content/themes/dude/js/src/navigation/a11y-add-dropdown-toggle-labels.js\");\n/* harmony import */ var _navigation_a11y_dropdown_menu_keyboard_navigation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./navigation/a11y-dropdown-menu-keyboard-navigation */ \"./content/themes/dude/js/src/navigation/a11y-dropdown-menu-keyboard-navigation.js\");\n/* harmony import */ var _navigation_convert_dropdown_menu_items__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./navigation/convert-dropdown-menu-items */ \"./content/themes/dude/js/src/navigation/convert-dropdown-menu-items.js\");\n/* harmony import */ var _navigation_close_sub_menu_handler__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./navigation/close-sub-menu-handler */ \"./content/themes/dude/js/src/navigation/close-sub-menu-handler.js\");\n/* harmony import */ var _navigation_a11y_add_dropdown_toggle_labels_click__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./navigation/a11y-add-dropdown-toggle-labels-click */ \"./content/themes/dude/js/src/navigation/a11y-add-dropdown-toggle-labels-click.js\");\n/* harmony import */ var _navigation_a11y_dropdown_menu_keyboard_navigation_click__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./navigation/a11y-dropdown-menu-keyboard-navigation-click */ \"./content/themes/dude/js/src/navigation/a11y-dropdown-menu-keyboard-navigation-click.js\");\n\n\n/**\n * Navigation.js module\n * The original, accessible navigation module for Air-light\n *\n * @Author: Roni Laukkarinen\n * @Date:   2022-06-30 16:24:47\n * @Last Modified by:   Roni Laukkarinen\n * @Last Modified time: 2023-05-18 17:10:37\n */\n// Import functions needed for the navigation module\n\n\n\n\n\n\n\n // Navigation desktop click functions\n\n\n\n\n\n\nvar navDesktop = function navDesktop() {\n  // Define globals\n  var menuItems = document.querySelectorAll('.menu-item'); // Define focusable elements on sub-menu (.menu-item a, .dropdown button)\n\n  var focusableElementsforDropdown = document.querySelectorAll('.menu-item a, .dropdown button, .button-nav'); // If main-menu is not found, bail\n\n  if (!document.getElementById('main-menu')) {\n    return;\n  } // Dropdown menus\n\n\n  (0,_navigation_a11y_add_dropdown_toggle_labels__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(menuItems);\n  (0,_navigation_a11y_dropdown_menu_keyboard_navigation__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(menuItems, focusableElementsforDropdown); // Dropdown on mouse hover\n\n  (0,_navigation_dropdown_menu_on_hover__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(menuItems); // Check for submenu overflow\n\n  (0,_navigation_check_for_submenu_overflow__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(menuItems);\n};\n\nvar navClick = function navClick() {\n  // If main-menu is not found, bail\n  if (!document.getElementById('main-menu')) {\n    return;\n  } // Search for all menu items that have submenus\n\n\n  var dropdownMenuItems = document.querySelectorAll('.menu-item-has-children'); // Convert submenus to clickable elements\n\n  (0,_navigation_convert_dropdown_menu_items__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(dropdownMenuItems); // Define globals\n\n  var menuItems = document.querySelectorAll('.menu-item'); // Define focusable elements on sub-menu (.menu-item a, .dropdown button)\n\n  var focusableElementsforDropdown = document.querySelectorAll('.menu-item a, .dropdown button, .button-nav'); // Dropdown menus\n\n  (0,_navigation_a11y_add_dropdown_toggle_labels_click__WEBPACK_IMPORTED_MODULE_11__[\"default\"])(menuItems);\n  (0,_navigation_a11y_dropdown_menu_keyboard_navigation_click__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(menuItems, focusableElementsforDropdown); // Handle different scenarios when menus should be closed\n\n  (0,_navigation_close_sub_menu_handler__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(menuItems);\n};\n\nvar navMobile = function navMobile() {\n  // If burger toggle is not found, bail\n  if (!document.getElementById('nav-toggle')) {\n    // eslint-disable-next-line no-console\n    console.log('Warning: No nav-toggle found.');\n    return;\n  }\n\n  function navToggle(e) {\n    // If clicked with mouse or enter key\n    if (e.type === 'click' || e.keyCode === 13) {\n      // Activate nav\n      document.body.classList.toggle('js-nav-active'); // Scroll to top when triggering mobile navigation\n      // to ensure no gaps are between header and navigation\n      // Please note, if you use sticky-nav, comment out the next line\n\n      window.scrollTo(0, 0); // Toggle aria-expanded attribute, if it's false, change to true and vice versa\n\n      if (document.getElementById('nav-toggle').getAttribute('aria-expanded') === 'false') {\n        document.getElementById('nav-toggle').setAttribute('aria-expanded', 'true');\n      } else {\n        document.getElementById('nav-toggle').setAttribute('aria-expanded', 'false');\n      } // Toggle aria-label\n      // eslint-disable-next-line camelcase, no-undef\n\n\n      if (document.getElementById('nav-toggle').getAttribute('aria-label') === dude_screenReaderText.expand_toggle) {\n        // eslint-disable-next-line camelcase, no-undef\n        document.getElementById('nav-toggle').setAttribute('aria-label', dude_screenReaderText.collapse_toggle);\n      } else {\n        // eslint-disable-next-line camelcase, no-undef\n        document.getElementById('nav-toggle').setAttribute('aria-label', dude_screenReaderText.expand_toggle);\n      } // Center vertically the absolute positioned mobile dropdown toggles by setting fixed height\n\n\n      (0,_navigation_calculate_dropdown_toggle_height__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(); // Focusable elements\n\n      var navContainer = document.getElementById('nav');\n\n      var focusableElements = (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(navContainer.querySelectorAll('a, button, input, textarea, select, details, [tabindex]:not([tabindex=\"-1\"])')).filter(function (el) {\n        return !el.hasAttribute('disabled');\n      }).filter(function (el) {\n        return !!(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n      });\n\n      focusableElements.forEach(function (menuItem) {\n        menuItem.addEventListener('keydown', _navigation_a11y_focus_trap__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\n      });\n    }\n  } // When clicking #nav-toggle, add .js-nav-active body class\n\n\n  (0,_navigation_add_multiple_event_listeners__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(document.getElementById('nav-toggle'), ['click', 'keydown', 'keypress'], navToggle); // Get all dropdown-toggles\n\n  var dropdownToggles = document.querySelectorAll('.dropdown-toggle'); // Loop through dropdown-toggles\n\n  dropdownToggles.forEach(function (dropdownToggle) {\n    // When clicking a dropdown-toggle, add .js-dropdown-active class to the parent .menu-item\n    (0,_navigation_add_multiple_event_listeners__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(dropdownToggle, ['click', 'keydown', 'keypress'], _navigation_calculate_dropdown_toggle_height__WEBPACK_IMPORTED_MODULE_4__[\"default\"]);\n  }); // Calculate mobile nav-toggle position\n\n  (0,_navigation_calculate_burger_menu_position__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n}; // Sticky navigation\n// eslint-disable-next-line no-unused-vars\n\n\nvar navSticky = function navSticky() {\n  function initStickyNavStyles() {\n    // Add default styles for sticky navigation as <style>\n    var style = document.createElement('style');\n    style.innerHTML = \"\\n    .site-header {\\n      transition: all 100ms cubic-bezier(.4, 0, .2, 1);\\n      overflow: visible;\\n      width: 100%;\\n      z-index: 100;\\n    }\\n\\n    .site-header.is-fixed {\\n      animation-duration: 300ms;\\n      animation-iteration-count: 1;\\n      animation-name: roll-in;\\n      background-color: var(--color-white);\\n      border-bottom: 1px solid var(--color-black);\\n      left: 0;\\n      position: fixed;\\n      top: 0;\\n    }\\n\\n    @keyframes roll-in {\\n      0% {\\n        opacity: 0;\\n        top: -100%;\\n      }\\n\\n      100% {\\n        opacity: 1;\\n        top: 0;\\n      }\\n    }\";\n    document.head.appendChild(style);\n  }\n\n  function initStickyNav() {\n    // Get --width-max-mobile from CSS\n    var widthMaxMobile = getComputedStyle(document.documentElement).getPropertyValue('--width-max-mobile'); // Let's see if we are on mobile viewport\n\n    var isMobile = window.matchMedia(\"(max-width: \".concat(widthMaxMobile, \")\")).matches; // If things are not okay, bail\n\n    if (isMobile) {\n      return;\n    }\n\n    var siteHeader = document.querySelector('.site-header');\n    var headerHeight = getComputedStyle(siteHeader).height.split('px')[0];\n    var scrollValue = window.scrollY;\n\n    if (scrollValue > headerHeight) {\n      siteHeader.classList.add('is-fixed');\n    } else if (scrollValue < headerHeight) {\n      siteHeader.classList.remove('is-fixed');\n    }\n\n    if (window.pageYOffset > headerHeight) {\n      siteHeader.classList.add('is-fixed');\n    }\n  }\n\n  window.addEventListener('scroll', initStickyNav);\n  window.addEventListener('DOMContentLoaded', initStickyNavStyles);\n}; // Export different navigation functions\n\n\n // Reinit some things\n\nwindow.addEventListener('resize', function () {\n  // Center vertically the absolute positioned burger\n  (0,_navigation_calculate_burger_menu_position__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(); // Center vertically the absolute positioned mobile dropdown toggles by setting fixed height\n\n  (0,_navigation_calculate_dropdown_toggle_height__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(); // Check for submenu overflow\n\n  (0,_navigation_check_for_submenu_overflow__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(document.querySelectorAll('.menu-item'));\n});\n\n//# sourceURL=webpack://dude/./content/themes/dude/js/src/navigation.js?");

/***/ }),

/***/ "./content/themes/dude/js/src/navigation/a11y-add-dropdown-toggle-labels-click.js":
/*!****************************************************************************************!*\
  !*** ./content/themes/dude/js/src/navigation/a11y-add-dropdown-toggle-labels-click.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * @Author: Roni Laukkarinen\n * @Date:   2022-12-31 00:23:22\n * @Last Modified by:   Roni Laukkarinen\n * @Last Modified time: 2023-05-18 17:06:12\n */\n// Add proper link labels for screen readers\nfunction a11yAddDropdownToggleLabelsClick(items) {\n  items.forEach(function (li) {\n    // If .dropdown-toggle does not exist then do nothing\n    if (!li.querySelector('.dropdown-toggle')) {\n      return;\n    } // Add helper class to dropdown-toggle\n\n\n    li.querySelector('.dropdown-toggle').classList.add('menu-item-clickable'); // Remove .dropdown-toggle class\n\n    li.querySelector('.dropdown-toggle').classList.remove('dropdown-toggle'); // Get the dropdown-button\n\n    var dropdownButton = li.querySelector('.menu-item-clickable'); // Get the link text that is children of this item\n\n    var linkText = dropdownButton.innerHTML; // Add the aria-label to the dropdown button\n    // eslint-disable-next-line camelcase, no-undef\n\n    dropdownButton.setAttribute('aria-label', \"\".concat(dude_screenReaderText.expand_for, \" \").concat(linkText));\n  });\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (a11yAddDropdownToggleLabelsClick);\n\n//# sourceURL=webpack://dude/./content/themes/dude/js/src/navigation/a11y-add-dropdown-toggle-labels-click.js?");

/***/ }),

/***/ "./content/themes/dude/js/src/navigation/a11y-add-dropdown-toggle-labels.js":
/*!**********************************************************************************!*\
  !*** ./content/themes/dude/js/src/navigation/a11y-add-dropdown-toggle-labels.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * @Author: Roni Laukkarinen\n * @Date:   2022-12-31 00:23:22\n * @Last Modified by:   Roni Laukkarinen\n * @Last Modified time: 2022-12-31 00:32:37\n */\n// Add proper link labels for screen readers\nfunction a11yAddDropdownToggleLabels(items) {\n  items.forEach(function (li) {\n    // If .dropdown-class does not exist then do nothing\n    if (!li.querySelector('.dropdown')) {\n      return;\n    } // Get the dropdown-button\n\n\n    var dropdownButton = li.querySelector('.dropdown-toggle'); // Get the link text that is children of this item\n\n    var linkText = li.querySelector('.dropdown').innerText; // Add the aria-label to the dropdown button\n    // eslint-disable-next-line camelcase, no-undef\n\n    dropdownButton.setAttribute('aria-label', \"\".concat(dude_screenReaderText.expand_for, \" \").concat(linkText));\n  });\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (a11yAddDropdownToggleLabels);\n\n//# sourceURL=webpack://dude/./content/themes/dude/js/src/navigation/a11y-add-dropdown-toggle-labels.js?");

/***/ }),

/***/ "./content/themes/dude/js/src/navigation/a11y-dropdown-menu-keyboard-navigation-click.js":
/*!***********************************************************************************************!*\
  !*** ./content/themes/dude/js/src/navigation/a11y-dropdown-menu-keyboard-navigation-click.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _add_multiple_event_listeners__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./add-multiple-event-listeners */ \"./content/themes/dude/js/src/navigation/add-multiple-event-listeners.js\");\n/**\n * @Author: Roni Laukkarinen\n * @Date:   2022-12-31 00:27:10\n * @Last Modified by:   Roni Laukkarinen\n * @Last Modified time: 2023-05-18 17:31:30\n */\n// Import required modules\n // Accessible keyboard navigation for dropdown menus\n\nfunction a11yDropdownMenuKeyboardNavigationClick(items, focusableElements) {\n  focusableElements.forEach(function (item) {\n    item.addEventListener('keyup', function (e) {\n      // Get this item\n      var thisElement = e.target; // Get this menu-item\n      // eslint-disable-next-line no-unused-vars\n\n      var thisMenuItem = thisElement.parentNode; // Close previous dropdown if this parent contains id main-menu\n\n      if (thisElement.parentNode.parentNode.id === 'main-menu' || thisElement.classList.contains('button-nav') && thisElement.parentNode.parentNode.id === 'main-menu') {\n        // If we have previous item\n        if (thisElement.parentNode.previousElementSibling) {\n          // Get the previous item\n          var previousItem = thisElement.parentNode.previousElementSibling; // Get main level sub-menu\n\n          var mainLevelSubMenu = previousItem.querySelector('.sub-menu'); // If sub-menu found, close nested sub-menus first\n\n          if (mainLevelSubMenu && mainLevelSubMenu.querySelectorAll('.menu-item-has-children')) {\n            mainLevelSubMenu.querySelectorAll('.menu-item-has-children').forEach(function (subMenu) {\n              // Get the previous item's dropdown\n              var previousItemDropdownToggle = subMenu.querySelector('.dropdown-toggle');\n              var previousItemDropdown = subMenu.querySelector('.sub-menu'); // Remove toggled-on class from previous item button\n\n              previousItemDropdownToggle.classList.remove('toggled-on'); // Remove toggled-on class from previous sibling\n\n              previousItemDropdown.classList.remove('toggled-on'); // Change toggle button aria-label\n              // eslint-disable-next-line camelcase, no-undef\n\n              previousItemDropdownToggle.setAttribute('aria-label', \"\".concat(dude_screenReaderText.expand_for, \" \").concat(previousItemDropdownToggle.innerText)); // Change toggle button aria-expanded\n\n              previousItemDropdownToggle.setAttribute('aria-expanded', 'false');\n            });\n          } // Close main level sub-menu\n\n\n          var previousItemDropdownToggle = previousItem.querySelector('.dropdown-toggle');\n          var previousItemDropdown = previousItem.querySelector('.sub-menu');\n\n          if (previousItemDropdownToggle && previousItemDropdown) {\n            // Remove toggled-on class from previous item button\n            previousItemDropdownToggle.classList.remove('toggled-on'); // Remove toggled-on class from previous sibling\n\n            previousItemDropdown.classList.remove('toggled-on'); // Change toggle button aria-label\n            // eslint-disable-next-line camelcase, no-undef\n\n            previousItemDropdownToggle.setAttribute('aria-label', \"\".concat(dude_screenReaderText.expand_for, \" \").concat(previousItemDropdownToggle.innerText)); // Change toggle button aria-expanded\n\n            previousItemDropdownToggle.setAttribute('aria-expanded', 'false');\n          }\n        }\n      }\n    }); // NVDA supported keyboard navigation (NVDA and mobile need click event to work)\n\n    (0,_add_multiple_event_listeners__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(item, ['click', 'keydown', 'keypress'], function (e) {\n      // Get this link or button\n      var thisElement = e.target; // Define the elements of this dropdown\n\n      var firstDropdown = thisElement.parentNode.parentNode.parentNode.querySelector('.sub-menu');\n      var thisDropdown = thisElement.nextElementSibling;\n      var dropdownToggleButton = thisElement.parentNode.parentNode.parentNode.querySelector('.dropdown-toggle'); // Open navigation on Enter, e.type click is for NVDA\n\n      if (e.key === 'Enter' || e.type === 'click') {\n        // If this item is a hyperlink, do nothing. We want to use Enter only with buttons\n        if (thisElement.tagName === 'A') {\n          return;\n        } // Get the text of button\n\n\n        var linkLabel = thisElement.innerText; // Toggle toggled-on class\n\n        thisElement.classList.toggle('toggled-on'); // If aria-expanded is false, set it to true\n\n        if (thisElement.getAttribute('aria-expanded') === 'false') {\n          // Set aria-expanded to true\n          thisElement.setAttribute('aria-expanded', 'true'); // Set aria-label of the dropdown button\n          // eslint-disable-next-line camelcase, no-undef\n\n          thisElement.setAttribute('aria-label', \"\".concat(dude_screenReaderText.collapse_for, \" \").concat(linkLabel));\n        } else {\n          // Set aria-expanded to false\n          thisElement.setAttribute('aria-expanded', 'false'); // Set aria-label of the dropdown button\n          // eslint-disable-next-line camelcase, no-undef\n\n          thisElement.setAttribute('aria-label', \"\".concat(dude_screenReaderText.expand_for, \" \").concat(linkLabel));\n        } // Toggle the dropdown\n\n\n        if (thisDropdown && !thisDropdown.classList.contains('toggled-on')) {\n          // Add toggled-on class to this dropdown\n          thisDropdown.classList.add('toggled-on');\n        } else {\n          // Remove toggled-on class from this dropdown\n          // eslint-disable-next-line no-lonely-if\n          if (thisDropdown) {\n            thisDropdown.classList.remove('toggled-on');\n          }\n        }\n      } // Close navigation on Escape\n\n\n      if (e.key === 'Escape') {\n        // Close mobile nav if no sub-menu is open\n        if (thisElement.parentNode.parentNode.id === 'main-menu' && !thisElement.parentNode.classList.contains('toggled-on')) {\n          document.body.classList.remove('js-nav-active'); // Move focus back to nav-toggle\n\n          document.getElementById('nav-toggle').focus();\n        } // If we're on main level and nav item is not open, do nothing\n\n\n        if (thisElement.parentNode.parentNode.id === 'main-menu' && !thisElement.parentNode.classList.contains('toggled-on')) {\n          return;\n        } // Remove toggled-on classes from this dropdown\n\n\n        firstDropdown.classList.remove('toggled-on'); // Set aria expanded attribute to false\n\n        dropdownToggleButton.setAttribute('aria-expanded', 'false'); // Remove toggled-on\n\n        dropdownToggleButton.classList.remove('toggled-on'); // Get the link label of dropdown link\n\n        var _linkLabel = thisElement.parentNode.querySelector('.dropdown-item').innerText; // Set aria label attribute\n        // eslint-disable-next-line camelcase, no-undef\n\n        dropdownToggleButton.setAttribute('aria-label', \"\".concat(dude_screenReaderText.expand_for, \" \").concat(_linkLabel)); // If we're on button, add aria-expanded to false\n\n        if (thisElement.classList.contains('dropdown-toggle')) {\n          thisElement.setAttribute('aria-expanded', 'false'); // Set aria-label of the dropdown button\n          // eslint-disable-next-line camelcase, no-undef\n\n          thisElement.setAttribute('aria-label', \"\".concat(dude_screenReaderText.expand_for, \" \").concat(_linkLabel));\n        } // Move focus back to previous .dropdown-toggle, but only if we're not on main level\n\n\n        if (thisElement.parentNode.parentNode.id !== 'main-menu') {\n          // Delay toggling for NVDA for 100 ms\n          setTimeout(function () {\n            dropdownToggleButton.focus();\n          }, 100);\n        }\n      } // If no arrow keys used, do not continue\n\n\n      if (e.key !== 'ArrowUp' && e.key !== 'ArrowDown' && e.key !== 'ArrowLeft' && e.key !== 'ArrowRight') {\n        return;\n      } // Arrow keys\n\n\n      switch (e.code) {\n        // ArrowUp\n        case 'ArrowUp':\n          // Stop propagation\n          e.stopPropagation(); // Stop scrolling\n\n          e.preventDefault(); // If we're on the sub-menu, move up\n\n          if (thisElement.parentNode.parentNode.previousElementSibling && thisElement.parentNode.parentNode.previousElementSibling.classList.contains('dropdown-toggle')) {\n            // Focus to the previous link\n            thisElement.parentNode.parentNode.previousElementSibling.focus();\n          } // If this is a .dropdown-toggle button and aria-expanded is true, close the dropdown\n\n\n          if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'true') {\n            // Remove toggled-on class from this dropdown\n            thisDropdown.classList.remove('toggled-on');\n            thisElement.classList.remove('toggled-on'); // Set aria-expanded attribute to false\n\n            thisElement.setAttribute('aria-expanded', 'false'); // Get the link label of .dropdown link\n\n            var _linkLabel2 = thisElement.parentNode.querySelector('.dropdown-item').innerText; // Set aria-label of the dropdown button\n            // eslint-disable-next-line camelcase, no-undef\n\n            thisElement.setAttribute('aria-label', \"\".concat(dude_screenReaderText.expand_for, \" \").concat(_linkLabel2)); // Move focus back to previous .dropdown-toggle\n\n            dropdownToggleButton.focus();\n          } // If this is a correct element, focus to the previous link\n\n\n          if (thisElement.tagName === 'A' || thisElement.tagName === 'BUTTON') {\n            // If there is no previous items, bail\n            if (!thisElement.parentNode.previousElementSibling) {\n              return;\n            } // Get the previous link\n\n\n            var previousLink = thisElement.parentNode.previousElementSibling.querySelector('a'); // Get .dropdown-toggle element\n\n            var previousToggle = thisElement.parentNode.previousElementSibling.querySelector('.dropdown-toggle'); // If previous element is .dropdown-toggle element, focus to it\n\n            if (previousToggle && !thisElement.querySelector('.dropdown-toggle')) {\n              previousToggle.focus();\n            } else {\n              // If previous element is a link, focus to it\n              previousLink.focus();\n            }\n          }\n\n          break;\n        // ArrowDown\n\n        case 'ArrowDown':\n          // Stop propagation\n          e.stopPropagation(); // Stop scrolling\n\n          e.preventDefault(); // If we're on the sub-menu, move down\n\n          if (thisElement.parentNode.parentNode.nextElementSibling && thisElement.parentNode.parentNode.nextElementSibling.classList.contains('dropdown-toggle')) {\n            // Focus to the next link\n            thisElement.parentNode.parentNode.nextElementSibling.focus();\n          } // If this is a .dropdown-toggle button and aria-expanded is true, move down\n\n\n          if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'true') {\n            // Focus to the next link\n            thisElement.parentNode.querySelector('.sub-menu').querySelector('li:first-child').querySelector('a').focus();\n          } // If this is a .dropdown-toggle button and aria-expanded is false, open sub-menu\n          // (if we are not inside sub-menu)\n\n\n          if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'false' && !thisElement.parentNode.parentNode.classList.contains('sub-menu')) {\n            // Open sub-menu\n            thisElement.click(); // Focus to the next link under sub-menu\n\n            thisElement.parentNode.querySelector('.sub-menu').querySelector('li:first-child').querySelector('a').focus(); // Don't do anything else\n\n            return;\n          } // If we are in fact in sub menu, move to next link\n\n\n          if (thisElement.parentNode.parentNode.classList.contains('sub-menu')) {\n            // Focus to the next link or .dropdown-toggle\n            // Generally focus the next link\n            if (thisElement.parentNode.nextElementSibling.querySelector(':scope > a')) {\n              thisElement.parentNode.nextElementSibling.querySelector(':scope > a').focus();\n            } else {\n              // If there is no next link, focus to the next .dropdown-toggle\n              thisElement.parentNode.nextElementSibling.querySelector('.dropdown-toggle').focus();\n            }\n          } // If this is a correct element, focus to the next link\n\n\n          if ((thisElement.tagName === 'A' || thisElement.tagName === 'BUTTON') && !thisElement.classList.contains('dropdown-toggle')) {\n            // If there is no next items, bail\n            if (!thisElement.parentNode.nextElementSibling) {\n              return;\n            } // Get the next link\n\n\n            var nextLink = thisElement.parentNode.nextElementSibling.querySelector('a'); // Get .dropdown-toggle element\n\n            var nextToggle = thisElement.parentNode.nextElementSibling.querySelector('.dropdown-toggle'); // If this has class .dropdown-item, jump to the next .dropdown-toggle\n\n            if (thisElement.classList.contains('dropdown-item')) {\n              // If there is a toggle\n              if (thisElement.nextElementSibling) {\n                // Get the dropdown-toggle element\n                nextToggle = thisElement.nextElementSibling; // If next element is .dropdown-toggle element, focus to it\n\n                if (nextToggle) {\n                  nextToggle.focus();\n                }\n              }\n            } // If next element is .dropdown-toggle element, focus to it\n\n\n            if (nextToggle && !thisElement.querySelector('.dropdown-toggle')) {\n              nextToggle.focus();\n            } else {\n              // If next element is a link, focus to it\n              nextLink.focus();\n            }\n          }\n\n          break;\n        // ArrowLeft\n\n        case 'ArrowLeft':\n          // Stop propagation\n          e.stopPropagation(); // Stop scrolling\n\n          e.preventDefault(); // If we are on the first link, move to the dropdown-toggle and close menu\n\n          if (thisElement.parentNode.previousElementSibling === null && thisElement.parentNode.parentNode.id !== 'main-menu') {\n            // Focus to the previous link\n            thisElement.parentNode.parentNode.parentNode.querySelector('.dropdown-toggle').focus(); // Close the dropdown\n\n            thisElement.parentNode.parentNode.parentNode.querySelector('.dropdown-toggle').click(); // Don't do anything else\n\n            return;\n          } // If this is a .dropdown-toggle button and aria-expanded is true, move left\n\n\n          if (thisElement.parentNode.previousElementSibling && thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'true' && thisElement.parentNode.parentNode.id !== 'main-menu') {\n            // Focus to the previous link\n            thisElement.parentNode.previousElementSibling.querySelector('a').focus();\n          } // If this is a .dropdown-toggle button and aria-expanded is false, close the dropdown\n\n\n          if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'false' && thisElement.parentNode.parentNode.id !== 'main-menu') {\n            // Remove toggled-on class from this dropdown\n            thisDropdown.classList.remove('toggled-on'); // Set aria-expanded attribute to false\n\n            thisElement.setAttribute('aria-expanded', 'false'); // Get the link label of .dropdown link\n\n            var _linkLabel3 = thisElement.parentNode.querySelector('.dropdown-item').innerText; // Set aria-label of the dropdown button\n            // eslint-disable-next-line camelcase, no-undef\n\n            thisElement.setAttribute('aria-label', \"\".concat(dude_screenReaderText.expand_for, \" \").concat(_linkLabel3)); // Move focus back to previous .dropdown-toggle\n\n            dropdownToggleButton.focus();\n          } // If this is a correct element, focus to the previous link\n\n\n          if (thisElement.tagName === 'A' || thisElement.tagName === 'BUTTON') {\n            // If this is a .dropdown-toggle button and aria-expanded is false,\n            // move to the link directly before it\n            if (thisElement.previousElementSibling && thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'false') {\n              // Focus to the previous link\n              thisElement.previousElementSibling.focus(); // Don't do anything else\n\n              return;\n            } // If there is no previous items, bail\n\n\n            if (!thisElement.parentNode.previousElementSibling) {\n              return;\n            } // Get the previous link\n\n\n            var _previousLink = thisElement.parentNode.previousElementSibling.querySelector('a'); // Get .dropdown-toggle element\n\n\n            var _previousToggle = thisElement.parentNode.previousElementSibling.querySelector('.dropdown-toggle'); // If previous element is .dropdown-toggle element, focus to it\n\n\n            if (_previousToggle) {\n              _previousToggle.focus();\n            } else {\n              // If previous element is a link, focus to it\n              _previousLink.focus();\n            }\n          }\n\n          break;\n        // ArrowRight\n\n        case 'ArrowRight':\n          // Stop propagation\n          e.stopPropagation(); // Stop scrolling\n\n          e.preventDefault(); // If this is a .dropdown-toggle button and aria-expanded is true, move right\n\n          if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'true' && thisElement.parentNode.parentNode.id !== 'main-menu') {\n            // Focus to the next link\n            thisElement.parentNode.querySelector('.sub-menu').querySelector('li:first-child').querySelector('a').focus();\n          } // If this has class .dropdown-item, jump to the next .dropdown-toggle\n\n\n          if (thisElement.nextElementSibling) {\n            thisElement.nextElementSibling.focus(); // Disable other actions if this is a .dropdown-item\n\n            if (thisElement.classList.contains('dropdown-item')) {\n              return;\n            }\n          } // If this is a .dropdown-toggle button and aria-expanded is false, open sub-menu\n\n\n          if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'false' && thisElement.parentNode.parentNode.id !== 'main-menu') {\n            // Open sub-menu\n            thisElement.click(); // Do nothing else\n\n            return;\n          } // If this is a dropdown-toggle button and aria-expanded is true, move right\n\n\n          if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'true' && thisElement.parentNode.parentNode.id !== 'main-menu') {\n            // Focus to the next link\n            thisElement.parentNode.querySelector('.sub-menu').querySelector('li:first-child').querySelector('a').focus(); // Don't do anything else\n\n            return;\n          } // If this is a correct element, focus to the previous link\n\n\n          if (thisElement.tagName === 'A' || thisElement.tagName === 'BUTTON') {\n            // If there is no next items, bail\n            if (!thisElement.parentNode.nextElementSibling) {\n              return;\n            } // Get the next link\n\n\n            var _nextLink = thisElement.parentNode.nextElementSibling.querySelector('a'); // Get .dropdown-toggle element\n\n\n            var _nextToggle = thisElement.parentNode.nextElementSibling.querySelector('.dropdown-toggle'); // If next element is .dropdown-toggle element, focus to it\n\n\n            if (_nextToggle) {\n              _nextToggle.focus();\n            } else {\n              // If next element is a link, focus to it\n              _nextLink.focus();\n            }\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    });\n  });\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (a11yDropdownMenuKeyboardNavigationClick);\n\n//# sourceURL=webpack://dude/./content/themes/dude/js/src/navigation/a11y-dropdown-menu-keyboard-navigation-click.js?");

/***/ }),

/***/ "./content/themes/dude/js/src/navigation/a11y-dropdown-menu-keyboard-navigation.js":
/*!*****************************************************************************************!*\
  !*** ./content/themes/dude/js/src/navigation/a11y-dropdown-menu-keyboard-navigation.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _add_multiple_event_listeners__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./add-multiple-event-listeners */ \"./content/themes/dude/js/src/navigation/add-multiple-event-listeners.js\");\n/**\n * @Author: Roni Laukkarinen\n * @Date:   2022-12-31 00:27:10\n * @Last Modified by:   Michael Bourne\n * @Last Modified time: 2023-03-01 21:22:11\n */\n// Import required modules\n // Accessible keyboard navigation for dropdown menus\n\nfunction a11yDropdownMenuKeyboardNavigation(items, focusableElements) {\n  focusableElements.forEach(function (item) {\n    item.addEventListener('keyup', function (e) {\n      // Get this item\n      var thisElement = e.target; // Close previous dropdown if this parent contains id main-menu\n\n      if (thisElement.parentNode.parentNode.id === 'main-menu' || thisElement.classList.contains('button-nav') && thisElement.parentNode.parentNode.id === 'main-menu') {\n        // If we have previous item\n        if (thisElement.parentNode.previousElementSibling) {\n          // Get the previous item\n          var previousItem = thisElement.parentNode.previousElementSibling; // Remove toggled-on class from previous item\n\n          previousItem.classList.remove('toggled-on'); // Remove hover-intent class from previous item\n\n          previousItem.classList.remove('hover-intent'); // If sub-menu found\n\n          if (previousItem.querySelector('.sub-menu')) {\n            // Get the previous item's dropdown\n            var previousItemDropdown = previousItem.querySelector('.sub-menu'); // Remove toggled-on class from previous sibling\n\n            previousItemDropdown.classList.remove('toggled-on'); // Remove hover-intent class from previous sibling\n\n            previousItemDropdown.classList.remove('hover-intent'); // Change toggle button aria-label\n            // eslint-disable-next-line camelcase, no-undef\n\n            previousItem.querySelector('.dropdown-toggle').setAttribute('aria-label', \"\".concat(dude_screenReaderText.expand_for, \" \").concat(previousItem.querySelector('.dropdown-item').innerText)); // Change toggle button aria-expanded\n\n            previousItem.querySelector('.dropdown-toggle').setAttribute('aria-expanded', 'false'); // Toggle toggled-on class on previousItem\n\n            previousItem.querySelector('.dropdown-toggle').classList.remove('toggled-on');\n          }\n        }\n      }\n    }); // NVDA supported keyboard navigation (NVDA and mobile need click event to work)\n\n    (0,_add_multiple_event_listeners__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(item, ['click', 'keydown', 'keypress'], function (e) {\n      // Get this link\n      var thisElement = e.target; // Get this menu-item\n\n      var thisMenuItem = thisElement.parentNode; // Define the elements of this dropdown\n\n      var firstDropdown = thisElement.parentNode.parentNode.parentNode.querySelector('.sub-menu');\n      var thisDropdown = thisElement.nextElementSibling;\n      var dropdownToggleButton = thisElement.parentNode.parentNode.parentNode.querySelector('.dropdown-toggle'); // Remove removing-hover class\n\n      thisElement.classList.remove('removing-hover');\n      thisMenuItem.parentNode.classList.remove('removing-hover'); // Open navigation on Enter, e.type click is for NVDA\n\n      if (e.key === 'Enter' || e.type === 'click') {\n        // If this item is a hyperlink, do nothing. We want to use Enter only with buttons\n        if (thisElement.tagName === 'A') {\n          return;\n        } // If link label not found, do nothing\n\n\n        if (!thisElement.parentNode.querySelector('.dropdown-item')) {\n          return;\n        } // Get the link label of .dropdown link\n\n\n        var linkLabel = thisElement.parentNode.querySelector('.dropdown-item').innerText; // Toggle toggled-on class\n\n        thisElement.classList.toggle('toggled-on'); // If aria-expanded is false, set it to true\n\n        if (thisElement.getAttribute('aria-expanded') === 'false') {\n          // Set aria-expanded to true\n          thisElement.setAttribute('aria-expanded', 'true'); // Set aria-label of the dropdown button\n          // eslint-disable-next-line camelcase, no-undef\n\n          thisElement.setAttribute('aria-label', \"\".concat(dude_screenReaderText.collapse_for, \" \").concat(linkLabel));\n        } else {\n          // Set aria-expanded to false\n          thisElement.setAttribute('aria-expanded', 'false'); // Set aria-label of the dropdown button\n          // eslint-disable-next-line camelcase, no-undef\n\n          thisElement.setAttribute('aria-label', \"\".concat(dude_screenReaderText.expand_for, \" \").concat(linkLabel));\n        } // Toggle the dropdown\n\n\n        if (thisDropdown && !thisDropdown.classList.contains('toggled-on')) {\n          // Add hover-intent class to this menu-item\n          thisMenuItem.classList.add('hover-intent'); // Add toggled-on class to this dropdown\n\n          thisDropdown.classList.add('toggled-on');\n        } else {\n          // Remove hover-intent class from this menu-item\n          if (thisMenuItem) {\n            thisMenuItem.classList.remove('hover-intent');\n          } // Remove toggled-on class from this dropdown\n\n\n          if (thisDropdown) {\n            thisDropdown.classList.remove('toggled-on');\n          }\n        }\n      } // Close navigation on Escape\n\n\n      if (e.key === 'Escape') {\n        // Close mobile nav if no sub-menu is open\n        if (thisElement.parentNode.parentNode.id === 'main-menu' && !thisElement.parentNode.classList.contains('toggled-on')) {\n          document.body.classList.remove('js-nav-active'); // Move focus back to nav-toggle\n\n          document.getElementById('nav-toggle').focus();\n        } // If we're on main level and nav item is not open, do nothing\n\n\n        if (thisElement.parentNode.parentNode.id === 'main-menu' && !thisElement.parentNode.classList.contains('hover-intent')) {\n          return;\n        } // Remove toggled-on classes from this dropdown\n\n\n        firstDropdown.classList.remove('toggled-on'); // Remove hover-intent classes from the current menu-item\n\n        thisMenuItem.classList.remove('hover-intent'); // Hide menu if we're on second level\n\n        thisMenuItem.parentNode.parentNode.classList.remove('hover-intent'); // Set aria expanded attribute to false\n\n        dropdownToggleButton.setAttribute('aria-expanded', 'false'); // Remove toggled-on\n\n        dropdownToggleButton.classList.remove('toggled-on'); // Get the link label of dropdown link\n\n        var _linkLabel = thisElement.parentNode.querySelector('.dropdown-item').innerText; // Set aria label attribute\n        // eslint-disable-next-line camelcase, no-undef\n\n        dropdownToggleButton.setAttribute('aria-label', \"\".concat(dude_screenReaderText.expand_for, \" \").concat(_linkLabel)); // If we're on button, add aria-expanded to false\n\n        if (thisElement.classList.contains('dropdown-toggle')) {\n          thisElement.setAttribute('aria-expanded', 'false'); // Set aria-label of the dropdown button\n          // eslint-disable-next-line camelcase, no-undef\n\n          thisElement.setAttribute('aria-label', \"\".concat(dude_screenReaderText.expand_for, \" \").concat(_linkLabel));\n        } // Move focus back to previous .dropdown-toggle, but only if we're not on main level\n\n\n        if (thisElement.parentNode.parentNode.id !== 'main-menu') {\n          // Delay toggling for NVDA for 100 ms\n          setTimeout(function () {\n            dropdownToggleButton.focus();\n          }, 100);\n        }\n      } // If no arrow keys used, do not continue\n\n\n      if (e.key !== 'ArrowUp' && e.key !== 'ArrowDown' && e.key !== 'ArrowLeft' && e.key !== 'ArrowRight') {\n        return;\n      } // Arrow keys\n\n\n      switch (e.code) {\n        // ArrowUp\n        case 'ArrowUp':\n          // Stop propagation\n          e.stopPropagation(); // Stop scrolling\n\n          e.preventDefault(); // If we're on the sub-menu, move up\n\n          if (thisElement.parentNode.parentNode.previousElementSibling && thisElement.parentNode.parentNode.previousElementSibling.classList.contains('dropdown-toggle')) {\n            // Focus to the previous link\n            thisElement.parentNode.parentNode.previousElementSibling.focus();\n          } // If this is a .dropdown-toggle button and aria-expanded is true, close the dropdown\n\n\n          if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'true') {\n            // Remove hover-intent class from this menu-item\n            thisMenuItem.classList.remove('hover-intent'); // Remove toggled-on class from this dropdown\n\n            thisDropdown.classList.remove('toggled-on'); // Set aria-expanded attribute to false\n\n            thisElement.setAttribute('aria-expanded', 'false'); // Get the link label of .dropdown link\n\n            var _linkLabel2 = thisElement.parentNode.querySelector('.dropdown-item').innerText; // Set aria-label of the dropdown button\n            // eslint-disable-next-line camelcase, no-undef\n\n            thisElement.setAttribute('aria-label', \"\".concat(dude_screenReaderText.expand_for, \" \").concat(_linkLabel2)); // Move focus back to previous .dropdown-toggle\n\n            dropdownToggleButton.focus();\n          } // If this is a correct element, focus to the previous link\n\n\n          if (thisElement.tagName === 'A' || thisElement.tagName === 'BUTTON') {\n            // If there is no previous items, bail\n            if (!thisElement.parentNode.previousElementSibling) {\n              return;\n            } // Get the previous link\n\n\n            var previousLink = thisElement.parentNode.previousElementSibling.querySelector('a'); // Get .dropdown-toggle element\n\n            var previousToggle = thisElement.parentNode.previousElementSibling.querySelector('.dropdown-toggle'); // If previous element is .dropdown-toggle element, focus to it\n\n            if (previousToggle && !thisElement.querySelector('.dropdown-toggle')) {\n              previousToggle.focus();\n            } else {\n              // If previous element is a link, focus to it\n              previousLink.focus();\n            }\n          }\n\n          break;\n        // ArrowDown\n\n        case 'ArrowDown':\n          // Stop propagation\n          e.stopPropagation(); // Stop scrolling\n\n          e.preventDefault(); // If we're on the sub-menu, move down\n\n          if (thisElement.parentNode.parentNode.nextElementSibling && thisElement.parentNode.parentNode.nextElementSibling.classList.contains('dropdown-toggle')) {\n            // Focus to the next link\n            thisElement.parentNode.parentNode.nextElementSibling.focus();\n          } // If this is a .dropdown-toggle button and aria-expanded is true, move down\n\n\n          if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'true') {\n            // Focus to the next link\n            thisElement.parentNode.querySelector('.sub-menu').querySelector('li:first-child').querySelector('a').focus();\n          } // If this is a .dropdown-toggle button and aria-expanded is false, open sub-menu\n          // (if we are not inside sub-menu)\n\n\n          if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'false' && !thisElement.parentNode.parentNode.classList.contains('sub-menu')) {\n            // Open sub-menu\n            thisElement.click(); // Focus to the next link under sub-menu\n\n            thisElement.parentNode.querySelector('.sub-menu').querySelector('li:first-child').querySelector('a').focus(); // Don't do anything else\n\n            return;\n          } // If we are in fact in sub menu, move to next link\n\n\n          if (thisElement.parentNode.parentNode.classList.contains('sub-menu')) {\n            // Focus to the next link\n            thisElement.parentNode.nextElementSibling.querySelector('a').focus();\n          } // If this is a correct element, focus to the next link\n\n\n          if ((thisElement.tagName === 'A' || thisElement.tagName === 'BUTTON') && !thisElement.classList.contains('dropdown-toggle')) {\n            // If there is no next items, bail\n            if (!thisElement.parentNode.nextElementSibling) {\n              return;\n            } // Get the next link\n\n\n            var nextLink = thisElement.parentNode.nextElementSibling.querySelector('a'); // Get .dropdown-toggle element\n\n            var nextToggle = thisElement.parentNode.nextElementSibling.querySelector('.dropdown-toggle'); // If this has class .dropdown-item, jump to the next .dropdown-toggle\n\n            if (thisElement.classList.contains('dropdown-item')) {\n              // If there is a toggle\n              if (thisElement.nextElementSibling) {\n                // Get the dropdown-toggle element\n                nextToggle = thisElement.nextElementSibling; // If next element is .dropdown-toggle element, focus to it\n\n                if (nextToggle) {\n                  nextToggle.focus();\n                }\n              }\n            } // If next element is .dropdown-toggle element, focus to it\n\n\n            if (nextToggle && !thisElement.querySelector('.dropdown-toggle')) {\n              nextToggle.focus();\n            } else {\n              // If next element is a link, focus to it\n              nextLink.focus();\n            }\n          }\n\n          break;\n        // ArrowLeft\n\n        case 'ArrowLeft':\n          // Stop propagation\n          e.stopPropagation(); // Stop scrolling\n\n          e.preventDefault(); // If we are on the first link, move to the dropdown-toggle and close menu\n\n          if (thisElement.parentNode.previousElementSibling === null && thisElement.parentNode.parentNode.id !== 'main-menu') {\n            // Focus to the previous link\n            thisElement.parentNode.parentNode.parentNode.querySelector('.dropdown-toggle').focus(); // Close the dropdown\n\n            thisElement.parentNode.parentNode.parentNode.querySelector('.dropdown-toggle').click(); // Don't do anything else\n\n            return;\n          } // If this is a .dropdown-toggle button and aria-expanded is true, move left\n\n\n          if (thisElement.parentNode.previousElementSibling && thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'true' && thisElement.parentNode.parentNode.id !== 'main-menu') {\n            // Focus to the previous link\n            thisElement.parentNode.previousElementSibling.querySelector('a').focus();\n          } // If this is a .dropdown-toggle button and aria-expanded is false, close the dropdown\n\n\n          if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'false' && thisElement.parentNode.parentNode.id !== 'main-menu') {\n            // Remove hover-intent class from this menu-item\n            thisMenuItem.classList.remove('hover-intent'); // Remove toggled-on class from this dropdown\n\n            thisDropdown.classList.remove('toggled-on'); // Set aria-expanded attribute to false\n\n            thisElement.setAttribute('aria-expanded', 'false'); // Get the link label of .dropdown link\n\n            var _linkLabel3 = thisElement.parentNode.querySelector('.dropdown-item').innerText; // Set aria-label of the dropdown button\n            // eslint-disable-next-line camelcase, no-undef\n\n            thisElement.setAttribute('aria-label', \"\".concat(dude_screenReaderText.expand_for, \" \").concat(_linkLabel3)); // Move focus back to previous .dropdown-toggle\n\n            dropdownToggleButton.focus();\n          } // If this is a correct element, focus to the previous link\n\n\n          if (thisElement.tagName === 'A' || thisElement.tagName === 'BUTTON') {\n            // If this is a .dropdown-toggle button and aria-expanded is false,\n            // move to the link directly before it\n            if (thisElement.previousElementSibling && thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'false') {\n              // Focus to the previous link\n              thisElement.previousElementSibling.focus(); // Don't do anything else\n\n              return;\n            } // If there is no previous items, bail\n\n\n            if (!thisElement.parentNode.previousElementSibling) {\n              return;\n            } // Get the previous link\n\n\n            var _previousLink = thisElement.parentNode.previousElementSibling.querySelector('a'); // Get .dropdown-toggle element\n\n\n            var _previousToggle = thisElement.parentNode.previousElementSibling.querySelector('.dropdown-toggle'); // If previous element is .dropdown-toggle element, focus to it\n\n\n            if (_previousToggle) {\n              _previousToggle.focus();\n            } else {\n              // If previous element is a link, focus to it\n              _previousLink.focus();\n            }\n          }\n\n          break;\n        // ArrowRight\n\n        case 'ArrowRight':\n          // Stop propagation\n          e.stopPropagation(); // Stop scrolling\n\n          e.preventDefault(); // If this is a .dropdown-toggle button and aria-expanded is true, move right\n\n          if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'true' && thisElement.parentNode.parentNode.id !== 'main-menu') {\n            // Focus to the next link\n            thisElement.parentNode.querySelector('.sub-menu').querySelector('li:first-child').querySelector('a').focus();\n          } // If this has class .dropdown-item, jump to the next .dropdown-toggle\n\n\n          if (thisElement.nextElementSibling) {\n            thisElement.nextElementSibling.focus(); // Disable other actions if this is a .dropdown-item\n\n            if (thisElement.classList.contains('dropdown-item')) {\n              return;\n            }\n          } // If this is a .dropdown-toggle button and aria-expanded is false, open sub-menu\n\n\n          if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'false' && thisElement.parentNode.parentNode.id !== 'main-menu') {\n            // Open sub-menu\n            thisElement.click(); // Do nothing else\n\n            return;\n          } // If this is a dropdown-toggle button and aria-expanded is true, move right\n\n\n          if (thisElement.classList.contains('dropdown-toggle') && thisElement.getAttribute('aria-expanded') === 'true' && thisElement.parentNode.parentNode.id !== 'main-menu') {\n            // Focus to the next link\n            thisElement.parentNode.querySelector('.sub-menu').querySelector('li:first-child').querySelector('a').focus(); // Don't do anything else\n\n            return;\n          } // If this is a correct element, focus to the previous link\n\n\n          if (thisElement.tagName === 'A' || thisElement.tagName === 'BUTTON') {\n            // If there is no next items, bail\n            if (!thisElement.parentNode.nextElementSibling) {\n              return;\n            } // Get the next link\n\n\n            var _nextLink = thisElement.parentNode.nextElementSibling.querySelector('a'); // Get .dropdown-toggle element\n\n\n            var _nextToggle = thisElement.parentNode.nextElementSibling.querySelector('.dropdown-toggle'); // If next element is .dropdown-toggle element, focus to it\n\n\n            if (_nextToggle) {\n              _nextToggle.focus();\n            } else {\n              // If next element is a link, focus to it\n              _nextLink.focus();\n            }\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    });\n  });\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (a11yDropdownMenuKeyboardNavigation);\n\n//# sourceURL=webpack://dude/./content/themes/dude/js/src/navigation/a11y-dropdown-menu-keyboard-navigation.js?");

/***/ }),

/***/ "./content/themes/dude/js/src/navigation/a11y-focus-trap.js":
/*!******************************************************************!*\
  !*** ./content/themes/dude/js/src/navigation/a11y-focus-trap.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\");\n\n\n/**\n * @Author: Roni Laukkarinen\n * @Date:   2022-12-31 00:21:44\n * @Last Modified by:   Tuomas Marttila\n * @Last Modified time: 2023-04-12 12:08:00\n */\nfunction a11yFocusTrap(e) {\n  // Init focusable elements\n  var focusableElements = []; // Define container\n\n  var container = document.getElementById('nav'); // Define nav-toggle\n\n  var navToggle = document.getElementById('nav-toggle'); // Get --width-max-mobile from CSS\n\n  var widthMaxMobile = getComputedStyle(document.documentElement).getPropertyValue('--width-max-mobile'); // Let's see if we are on mobile viewport\n\n  var isMobile = window.matchMedia(\"(max-width: \".concat(widthMaxMobile, \")\")).matches; // If things are not okay, bail\n\n  if (!container || !navToggle || !isMobile) {\n    return;\n  } // Set focusable elements inside main navigation.\n\n\n  focusableElements = (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(container.querySelectorAll('a, button, input, textarea, select, details, [tabindex]:not([tabindex=\"-1\"])')).filter(function (el) {\n    return !el.hasAttribute('disabled');\n  }).filter(function (el) {\n    return !!(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n  }); // Get first and last focusable element\n\n  var firstFocusableElement = focusableElements[0];\n  var lastFocusableElement = focusableElements[focusableElements.length - 1]; // On key down on first element, if it's a Shift+Tab, redirect to last element\n\n  if (firstFocusableElement === e.target && e.code === 'Tab' && e.shiftKey) {\n    e.preventDefault();\n    lastFocusableElement.focus();\n  } // On key down on last element, if it's a Tab, redirect to first element\n\n\n  if (lastFocusableElement === e.target && e.code === 'Tab' && !e.shiftKey) {\n    e.preventDefault();\n    firstFocusableElement.focus();\n  }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (a11yFocusTrap);\n\n//# sourceURL=webpack://dude/./content/themes/dude/js/src/navigation/a11y-focus-trap.js?");

/***/ }),

/***/ "./content/themes/dude/js/src/navigation/add-multiple-event-listeners.js":
/*!*******************************************************************************!*\
  !*** ./content/themes/dude/js/src/navigation/add-multiple-event-listeners.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * @Author: Roni Laukkarinen\n * @Date:   2022-12-31 00:23:49\n * @Last Modified by:   Roni Laukkarinen\n * @Last Modified time: 2022-12-31 00:23:57\n */\n// Event listener helper function\nfunction addMultipleEventListeners(element, events, handler) {\n  events.forEach(function (e) {\n    return element.addEventListener(e, handler);\n  });\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (addMultipleEventListeners);\n\n//# sourceURL=webpack://dude/./content/themes/dude/js/src/navigation/add-multiple-event-listeners.js?");

/***/ }),

/***/ "./content/themes/dude/js/src/navigation/calculate-burger-menu-position.js":
/*!*********************************************************************************!*\
  !*** ./content/themes/dude/js/src/navigation/calculate-burger-menu-position.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * @Author: Roni Laukkarinen\n * @Date:   2022-12-31 00:21:23\n * @Last Modified by:   Michael Bourne\n * @Last Modified time: 2023-03-09 12:19:32\n */\n// Calculate burger menu position\nfunction calculateBurgerMenuPosition() {\n  // If nav-toggle, site-header or main-menu not found, bail\n  if (!document.getElementById('nav-toggle') || !document.querySelector('.site-header') || !document.getElementById('menu-items-wrapper')) {\n    // eslint-disable-next-line no-console\n    console.log('Warning: No nav-toggle or site-header found.');\n    return;\n  } // Set viewport\n\n\n  var viewportWidth = document.documentElement.clientWidth || document.body.clientWidth; // Get --width-max-mobile from CSS\n\n  var widthMaxMobile = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--width-max-mobile'), 10); // Get the height of .site-header and #nav-toggle\n  // Calculate the top position of the toggle to be exactly in the center vertically\n\n  var siteHeaderHeight = document.querySelector('.site-header').offsetHeight; // Set navigation position from top if on mobile\n\n  if (viewportWidth <= widthMaxMobile) {\n    document.getElementById('menu-items-wrapper').style.top = \"\".concat(siteHeaderHeight, \"px\");\n    document.getElementById('menu-items-wrapper').style.height = \"calc(100vh - \".concat(siteHeaderHeight, \"px)\"); // If there is air-notification element(s), calculate top and height of menu-items-wrapper\n\n    if (document.querySelector('.air-notification')) {\n      // Get air-notification element(s)\n      var airNotifications = document.querySelectorAll('.air-notification'); // Get the height of air-notification(s)\n\n      var airNotificationsHeight = 0;\n      airNotifications.forEach(function (airNotification) {\n        airNotificationsHeight = airNotification.offsetHeight + airNotificationsHeight;\n      }); // Set the height and top of menu-items-wrapper\n\n      document.getElementById('menu-items-wrapper').style.height = \"calc(100vh - \".concat(siteHeaderHeight + airNotificationsHeight, \"px)\");\n      document.getElementById('menu-items-wrapper').style.top = \"\".concat(siteHeaderHeight + airNotificationsHeight, \"px\"); // When air-notification is closed, recalculate the height of menu-items-wrapper\n\n      airNotifications.forEach(function (airNotification) {\n        var button = airNotification.querySelector('button');\n        var currenNotificationHeight = airNotification.offsetHeight;\n\n        if (button) {\n          button.addEventListener('click', function () {\n            airNotificationsHeight -= currenNotificationHeight;\n            document.getElementById('menu-items-wrapper').style.height = \"calc(100vh - \".concat(siteHeaderHeight + airNotificationsHeight, \"px)\");\n            document.getElementById('menu-items-wrapper').style.top = \"\".concat(siteHeaderHeight + airNotificationsHeight, \"px\");\n          });\n        }\n      });\n    }\n  } else {\n    document.getElementById('menu-items-wrapper').style.top = '0';\n    document.getElementById('menu-items-wrapper').style.height = 'auto';\n  }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (calculateBurgerMenuPosition);\n\n//# sourceURL=webpack://dude/./content/themes/dude/js/src/navigation/calculate-burger-menu-position.js?");

/***/ }),

/***/ "./content/themes/dude/js/src/navigation/calculate-dropdown-toggle-height.js":
/*!***********************************************************************************!*\
  !*** ./content/themes/dude/js/src/navigation/calculate-dropdown-toggle-height.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * @Author: Roni Laukkarinen\n * @Date:   2022-12-31 00:22:16\n * @Last Modified by:   Tuomas Marttila\n * @Last Modified time: 2023-04-12 09:53:53\n */\n// Calculate mobile nav-toggle height\nfunction calculateDropdownToggleHeight() {\n  // If .dropdown-toggle not found, bail\n  if (!document.querySelectorAll('.dropdown-toggle')) {\n    // eslint-disable-next-line no-console\n    console.log('Warning: No dropdown-toggles found.');\n    return;\n  } // Find all .dropdown-toggle elements on mobile\n\n\n  var dropdownToggles = document.querySelectorAll('.dropdown-toggle'); // Loop through dropdown toggles\n\n  dropdownToggles.forEach(function (dropdownToggle) {\n    // Get the height of previous element\n    var previousElement = dropdownToggle.previousElementSibling;\n\n    if (previousElement) {\n      var previousElementHeight = previousElement.offsetHeight; // Set the height of the dropdown toggle\n      // eslint-disable-next-line no-param-reassign\n\n      dropdownToggle.style.height = \"\".concat(previousElementHeight, \"px\");\n    }\n  });\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (calculateDropdownToggleHeight);\n\n//# sourceURL=webpack://dude/./content/themes/dude/js/src/navigation/calculate-dropdown-toggle-height.js?");

/***/ }),

/***/ "./content/themes/dude/js/src/navigation/check-for-submenu-overflow.js":
/*!*****************************************************************************!*\
  !*** ./content/themes/dude/js/src/navigation/check-for-submenu-overflow.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _is_out_of_viewport__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is-out-of-viewport */ \"./content/themes/dude/js/src/navigation/is-out-of-viewport.js\");\n/**\n * @Author: Roni Laukkarinen\n * @Date:   2022-12-31 00:23:22\n * @Last Modified by:   Roni Laukkarinen\n * @Last Modified time: 2022-12-31 00:28:01\n */\n// Import required modules\n // Check for submenu overflow\n\nfunction checkForSubmenuOverflow(items) {\n  // If items not found, bail\n  if (!items) {\n    // eslint-disable-next-line no-console\n    console.log('Warning: No items for sub-menus found.');\n    return;\n  }\n\n  items.forEach(function (li) {\n    // Find sub menus\n    var subMenusUnderMenuItem = li.querySelectorAll('.sub-menu'); // Loop through sub menus\n\n    subMenusUnderMenuItem.forEach(function (subMenu) {\n      // First let's check if submenu exists\n      if (typeof subMenusUnderMenuItem !== 'undefined') {\n        // Check if the sub menu is out of viewport or not\n        var isOut = (0,_is_out_of_viewport__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(subMenu); // At least one side of the element is out of viewport\n\n        if (isOut.right) {\n          subMenu.classList.add('is-out-of-viewport');\n        }\n      }\n    });\n  });\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (checkForSubmenuOverflow);\n\n//# sourceURL=webpack://dude/./content/themes/dude/js/src/navigation/check-for-submenu-overflow.js?");

/***/ }),

/***/ "./content/themes/dude/js/src/navigation/close-sub-menu-handler.js":
/*!*************************************************************************!*\
  !*** ./content/themes/dude/js/src/navigation/close-sub-menu-handler.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _close_sub_menu__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./close-sub-menu */ \"./content/themes/dude/js/src/navigation/close-sub-menu.js\");\n/**\n * @Author: Tuomas Marttila\n * @Date:   2023-03-21 15:25:27\n * @Last Modified by:   Tuomas Marttila\n * @Last Modified time: 2023-04-12 15:30:03\n */\n\n\nfunction closeSubMenuHandler(items) {\n  // Close open dropdowns when clicking outside of the menu\n  var page = document.getElementById('page');\n  page.addEventListener('click', function (e) {\n    // If the click is inside the menu, bail\n    if (e.target.closest('.menu-items')) {\n      return;\n    }\n\n    items.forEach(function (li) {\n      (0,_close_sub_menu__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(li);\n    });\n  }); // Close open dropdown when pressing escape\n\n  items.forEach(function (li) {\n    li.addEventListener('keydown', function (keydownMouseoverEvent) {\n      if (keydownMouseoverEvent.key === 'Escape') {\n        (0,_close_sub_menu__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(li);\n      }\n    });\n  }); // Close other dropdowns when opening a new one\n\n  items.forEach(function (li) {\n    // Bail if no dropdown\n    if (!li.classList.contains('menu-item-has-children')) {\n      return;\n    }\n\n    var dropdownToggle = li.querySelector('.dropdown-toggle');\n    var sameLevelDropdowns = li.parentNode.querySelectorAll(':scope > .menu-item-has-children'); // Add event listener to dropdown toggle\n\n    dropdownToggle.addEventListener('click', function () {\n      // We want to close other dropdowns only when a new one is opened\n      if (!dropdownToggle.classList.contains('toggled-on')) {\n        return;\n      }\n\n      sameLevelDropdowns.forEach(function (sameLevelDropdown) {\n        if (sameLevelDropdown !== li) {\n          // Close all other sub level dropdowns\n          sameLevelDropdown.querySelectorAll('.menu-item').forEach(function (subLi) {\n            (0,_close_sub_menu__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(subLi);\n          }); // Close other same level dropdowns\n\n          (0,_close_sub_menu__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(sameLevelDropdown);\n        }\n      });\n    });\n  });\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (closeSubMenuHandler);\n\n//# sourceURL=webpack://dude/./content/themes/dude/js/src/navigation/close-sub-menu-handler.js?");

/***/ }),

/***/ "./content/themes/dude/js/src/navigation/close-sub-menu.js":
/*!*****************************************************************!*\
  !*** ./content/themes/dude/js/src/navigation/close-sub-menu.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * @Author: Tuomas Marttila\n * @Date:   2023-03-22 09:20:46\n * @Last Modified by:   Tuomas Marttila\n * @Last Modified time: 2023-04-12 10:32:04\n */\nfunction closeSubMenu(li) {\n  // If menu item is not a dropdown then do nothing\n  if (!li.querySelector('.dropdown-toggle') && !li.querySelector('.sub-menu')) {\n    return;\n  } // Get the dropdown-button\n\n\n  var dropdownButton = li.querySelector('.dropdown-toggle'); // Get the submenu\n\n  var subMenu = li.querySelector('.sub-menu'); // If the dropdown-menu is not open, bail\n\n  if (!subMenu.classList.contains('toggled-on')) {\n    return;\n  } // Remove the open class from the dropdown-menu\n\n\n  subMenu.classList.remove('toggled-on'); // Remove the open class from the dropdown-button\n\n  dropdownButton.classList.remove('toggled-on'); // Remove the aria-expanded attribute from the dropdown-button\n\n  dropdownButton.setAttribute('aria-expanded', 'false'); // Get the link text that is children of this item\n\n  var linkText = dropdownButton.innerHTML; // Add the aria-label to the dropdown button\n  // eslint-disable-next-line camelcase, no-undef\n\n  dropdownButton.setAttribute('aria-label', \"\".concat(dude_screenReaderText.expand_for, \" \").concat(linkText));\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (closeSubMenu);\n\n//# sourceURL=webpack://dude/./content/themes/dude/js/src/navigation/close-sub-menu.js?");

/***/ }),

/***/ "./content/themes/dude/js/src/navigation/convert-dropdown-menu-items.js":
/*!******************************************************************************!*\
  !*** ./content/themes/dude/js/src/navigation/convert-dropdown-menu-items.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * @Author: Tuomas Marttila\n * @Date:   2023-02-28 10:38:36\n * @Last Modified by:   Tuomas Marttila\n * @Last Modified time: 2023-03-31 12:00:41\n */\nfunction convertDropdownMenuItems(items) {\n  items.forEach(function (li) {\n    // Get dropdown toggle button\n    var dropdownToggle = li.querySelector('.dropdown-toggle'); // Get dropdown menu item data\n\n    var menuItemTitle = li.querySelector('a > span').innerHTML;\n    var menuItemLinkElement = li.querySelector('a');\n    var menuItemLink = menuItemLinkElement.href; // Remove dropdown menu item link\n\n    menuItemLinkElement.remove(); // Add dropdown menu item title to dropdown toggle button\n\n    dropdownToggle.innerHTML = menuItemTitle; // Create new nav element\n\n    var navElement = document.createElement('li');\n    navElement.classList.add('menu-item'); // Add dropdown menu item data to nav element\n    // Create elements\n\n    var navElementLink = document.createElement('a');\n    var navElementLinkSpan = document.createElement('span'); // Add data to elements\n    // Span\n\n    navElementLinkSpan.innerHTML = menuItemTitle;\n    navElementLinkSpan.setAttribute('itemprop', 'name'); // Link\n\n    navElementLink.setAttribute('itemprop', 'url');\n    navElementLink.href = menuItemLink;\n    navElementLink.classList.add('dropdown-item'); // Append elements\n\n    navElementLink.appendChild(navElementLinkSpan);\n    navElement.appendChild(navElementLink); // Get the sub menu first child and add the new nav element before it\n\n    var subMenuFirstChild = li.querySelector('.sub-menu > li');\n    var subMenu = li.querySelector('.sub-menu');\n    subMenu.insertBefore(navElement, subMenuFirstChild);\n  });\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (convertDropdownMenuItems);\n\n//# sourceURL=webpack://dude/./content/themes/dude/js/src/navigation/convert-dropdown-menu-items.js?");

/***/ }),

/***/ "./content/themes/dude/js/src/navigation/dropdown-menu-on-hover.js":
/*!*************************************************************************!*\
  !*** ./content/themes/dude/js/src/navigation/dropdown-menu-on-hover.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * @Author: Roni Laukkarinen\n * @Date:   2022-12-31 00:24:53\n * @Last Modified by:   Roni Laukkarinen\n * @Last Modified time: 2022-12-31 01:33:39\n */\n// Dropdown menu function\nfunction dropdownMenuOnHover(items) {\n  // Optional timeout\n  var hoverIntentTimeout = 0;\n  items.forEach(function (li) {\n    // eslint-disable-next-line func-names\n    li.addEventListener('mouseover', function () {\n      var _this = this;\n\n      // Get --width-max-mobile from CSS\n      var widthMaxMobile = getComputedStyle(document.documentElement).getPropertyValue('--width-max-mobile'); // Let's see if we are on mobile viewport\n\n      var isMobile = window.matchMedia(\"(max-width: \".concat(widthMaxMobile, \")\")).matches; // If rules don't apply, bail\n\n      if (li.classList.contains('removing-hover') || isMobile) {\n        return;\n      } // Add hover classes\n\n\n      this.classList.add('hover-intent');\n      this.classList.add('hovering');\n      this.parentNode.classList.add('hover-intent');\n      this.parentNode.classList.add('hovering'); // Remove hovering class after a while\n\n      setTimeout(function () {\n        _this.classList.remove('hovering');\n\n        _this.parentNode.classList.remove('hovering');\n      }, 500);\n      document.addEventListener('keydown', function (keydownMouseoverEvent) {\n        // If rules don't apply, bail\n        if (_this.classList.contains('removing-hover') || !_this.classList.contains('hovering') || !_this.parentNode.classList.contains('hovering')) {\n          return;\n        } // Close navigation on Escape while hovering the navigation\n\n\n        if (keydownMouseoverEvent.key === 'Escape') {\n          li.classList.remove('hover-intent');\n          li.parentNode.classList.remove('hover-intent');\n          li.parentNode.parentNode.classList.remove('hover-intent'); // Add class removing-hover to prevent the menu from opening again when moving the mouse\n\n          li.classList.add('removing-hover');\n          li.parentNode.classList.add('removing-hover'); // Remove removing-hover class after a while to re-initialize the menu\n\n          setTimeout(function () {\n            _this.classList.remove('removing-hover');\n\n            _this.parentNode.classList.remove('removing-hover');\n          }, 500);\n        }\n      }); // Remove removing-hover class after a while to re-initialize the menu\n\n      setTimeout(function () {\n        _this.classList.remove('removing-hover');\n\n        _this.parentNode.classList.remove('removing-hover');\n      }, 500);\n    }); // eslint-disable-next-line func-names\n\n    li.addEventListener('mouseleave', function () {\n      var _this2 = this;\n\n      setTimeout(function () {\n        // Remove hover-intent class on mouse leave\n        _this2.classList.remove('hover-intent');\n\n        _this2.parentNode.classList.remove('hover-intent');\n\n        var dropdownToggles = _this2.querySelectorAll('.dropdown-toggle');\n\n        dropdownToggles.forEach(function (dropdownToggle) {\n          // Set aria-expanded to false for all dropdown-toggle elements\n          dropdownToggle.setAttribute('aria-expanded', 'false');\n\n          if (dropdownToggle.parentNode.querySelector('.dropdown')) {\n            var linkText = dropdownToggle.parentNode.querySelector('.dropdown').textContent; // Set aria-label to expand for all dropdown-toggle elements\n            // eslint-disable-next-line camelcase, no-undef\n\n            dropdownToggle.setAttribute('aria-label', \"\".concat(dude_screenReaderText.expand_for, \" \").concat(linkText));\n          }\n        });\n      }, hoverIntentTimeout);\n      setTimeout(function () {\n        // Remove removing-hover class after a while to re-initialize the menu\n        _this2.classList.remove('removing-hover');\n\n        _this2.parentNode.classList.remove('removing-hover');\n      }, 500);\n    });\n  });\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (dropdownMenuOnHover);\n\n//# sourceURL=webpack://dude/./content/themes/dude/js/src/navigation/dropdown-menu-on-hover.js?");

/***/ }),

/***/ "./content/themes/dude/js/src/navigation/is-out-of-viewport.js":
/*!*********************************************************************!*\
  !*** ./content/themes/dude/js/src/navigation/is-out-of-viewport.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * @Author: Roni Laukkarinen\n * @Date:   2022-12-31 00:19:27\n * @Last Modified by:   Michael Bourne\n * @Last Modified time: 2023-03-09 12:19:32\n */\n// Check if an element is out of the viewport\n// eslint-disable-next-line func-names\nvar isOutOfViewport = function isOutOfViewport(elem) {\n  // Get element's bounding\n  var bounding = elem.getBoundingClientRect(); // Check if it's out of the viewport on each side\n\n  var out = {};\n  out.top = bounding.top < 0;\n  out.left = bounding.left < 0;\n  out.bottom = bounding.bottom >= (document.documentElement.clientHeight || document.body.clientHeight);\n  out.right = bounding.right >= (document.documentElement.clientWidth || document.body.clientWidth);\n  out.any = out.top || out.left || out.bottom || out.right;\n  return out;\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isOutOfViewport);\n\n//# sourceURL=webpack://dude/./content/themes/dude/js/src/navigation/is-out-of-viewport.js?");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _arrayLikeToArray)\n/* harmony export */ });\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\n//# sourceURL=webpack://dude/./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js?");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _arrayWithoutHoles)\n/* harmony export */ });\n/* harmony import */ var _arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayLikeToArray.js */ \"./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(arr);\n}\n\n//# sourceURL=webpack://dude/./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js?");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/iterableToArray.js":
/*!********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _iterableToArray)\n/* harmony export */ });\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n//# sourceURL=webpack://dude/./node_modules/@babel/runtime/helpers/esm/iterableToArray.js?");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _nonIterableSpread)\n/* harmony export */ });\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n//# sourceURL=webpack://dude/./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js?");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _toConsumableArray)\n/* harmony export */ });\n/* harmony import */ var _arrayWithoutHoles_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayWithoutHoles.js */ \"./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js\");\n/* harmony import */ var _iterableToArray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iterableToArray.js */ \"./node_modules/@babel/runtime/helpers/esm/iterableToArray.js\");\n/* harmony import */ var _unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./unsupportedIterableToArray.js */ \"./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js\");\n/* harmony import */ var _nonIterableSpread_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./nonIterableSpread.js */ \"./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js\");\n\n\n\n\nfunction _toConsumableArray(arr) {\n  return (0,_arrayWithoutHoles_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(arr) || (0,_iterableToArray_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(arr) || (0,_unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(arr) || (0,_nonIterableSpread_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n}\n\n//# sourceURL=webpack://dude/./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js?");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _unsupportedIterableToArray)\n/* harmony export */ });\n/* harmony import */ var _arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayLikeToArray.js */ \"./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(o, minLen);\n}\n\n//# sourceURL=webpack://dude/./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/
/************************************************************************/
/******/
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./content/themes/dude/js/src/navigation.js");
/******/
/******/ })()
;
